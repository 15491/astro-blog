---
import { type CollectionEntry, render } from "astro:content";

import Masthead from "@/components/blog/Masthead.astro";
import TOC from "@/components/blog/TOC.astro";

import BaseLayout from "./Base.astro";

interface Props {
  post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const { ogImage, title, description, updatedDate, publishDate } = post.data;
const socialImage = ogImage ?? `/og-image/${post.id}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings, remarkPluginFrontmatter } = await render(post);
const readingTime: string = remarkPluginFrontmatter.readingTime;
---

<BaseLayout
  meta={{
    articleDate,
    description,
    ogImage: socialImage,
    title,
  }}
>
  <article class="grow break-words" data-pagefind-body>
    <div id="blog-hero" class="mb-12"><Masthead content={post} readingTime={readingTime} /></div>
    <div class="flex flex-col gap-10 lg:flex-row lg:items-start lg:justify-between">
      {!!headings.length && <TOC headings={headings} />}
      <div
        class="prose prose-sm prose-headings:font-semibold prose-headings:text-accent-2 prose-headings:before:absolute prose-headings:before:-ms-4 prose-headings:before:text-gray-600 prose-headings:hover:before:text-accent sm:prose-headings:before:content-['#'] sm:prose-th:before:content-none"
      >
        <slot />
      </div>
    </div>
  </article>
  <button
    id="back-btn"
    class="fixed end-4 top-8 z-90 flex h-10 w-10 cursor-pointer items-center justify-center rounded-full border-2 border-red-200 bg-red-100 text-red-700 transition-all duration-300 hover:border-red-300 hover:bg-red-200 hover:text-red-800 hover:shadow-md sm:end-8 sm:h-12 sm:w-12 dark:border-red-800/30 dark:bg-red-900/20 dark:text-red-400 dark:hover:border-red-700/50 dark:hover:bg-red-800/30 dark:hover:text-red-300"
    title="返回上一页"
  >
    <span class="sr-only">返回上一页</span>
    <svg
      aria-hidden="true"
      class="h-6 w-6"
      fill="none"
      focusable="false"
      stroke="currentColor"
      stroke-width="2"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M15 18l-6-6 6-6" stroke-linecap="round" stroke-linejoin="round"></path>
    </svg>
  </button>
  <button
    class="hover:border-link fixed end-4 bottom-8 z-90 flex h-10 w-10 translate-y-28 cursor-pointer items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all transition-discrete duration-300 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 sm:end-8 sm:h-12 sm:w-12 dark:bg-zinc-700"
    data-show="false"
    id="to-top-btn"
  >
    <span class="sr-only">Back to top</span>
    <svg
      aria-hidden="true"
      class="h-6 w-6"
      fill="none"
      focusable="false"
      stroke="currentColor"
      stroke-width="2"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
    </svg>
  </button>
</BaseLayout>

<script>
  const backBtn = document.getElementById("back-btn") as HTMLButtonElement;
  const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
  const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

  // 记录页面加载时的历史记录长度和当前URL
  let initialHistoryLength = history.length;
  let initialPath = window.location.pathname;

  backBtn.addEventListener("click", () => {
    // 检查当前路径是否与初始路径相同（即只是锚点变化）
    const currentPath = window.location.pathname;

    if (currentPath === initialPath && history.length > initialHistoryLength) {
      // 如果在同一页面且历史记录增加了，说明有锚点跳转
      // 跳过锚点历史记录，直接返回到真正的上一页
      const stepsBack = history.length - initialHistoryLength + 1;
      history.go(-stepsBack);
    } else {
      // 正常返回
      history.back();
    }
  });

  function callback(entries: IntersectionObserverEntry[]) {
    entries.forEach((entry) => {
      // only show the scroll to top button when the heading is out of view
      scrollBtn.dataset.show = (!entry.isIntersecting).toString();
    });
  }

  scrollBtn.addEventListener("click", () => {
    document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
  });

  const observer = new IntersectionObserver(callback);
  observer.observe(targetHeader);
</script>
